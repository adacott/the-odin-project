⁡⁢⁣⁣𝗝𝗔𝗩𝗔𝗦𝗖𝗥𝗜𝗣𝗧⁡

    Javscript can be added to an html file directly by doing:

    <script>
    // Your javascript goes here
    console.log("Hello World!")
    </script>

    Now, to view your code, you would launch the html file in the browser, open the dev tools, then go to the console to see the message.
    The other way to insert javascript for more complex scripts is to use an external script. Here, just like you link html, you would
    do the same with js by typing:

        <script src="javascript.js"></script>

    And then populate the external script file with the code you want to run

    ⁡⁢⁣⁣Variables
        ⁡⁢⁢⁣Declare variables in javascript with:
            var, let and const can be used to declare variables⁡⁡
            ⁡⁢⁣⁣let:⁡
                let message = "Hello!";      let user = "John", age = 25, message = "Hello!";
                let user = "John",
                    age 25, message = "Hello";
            ⁡⁢⁣⁣var:⁡
                var message = "Hello";
            Case matters: for example, apple and APPLE are two different variables
            Variables can be declared with num = 5 for example, as long as you dont put "use strict" in your script to maintain compatibility
                with older scripts
            ⁡⁢⁣⁣cont:⁡
                To create a constant unchanging variable, use const instead of let:
                    const myBirthday = "18.04.1982";
                It is good practice to use constants as aliases for difficult to remember values that are known prior to execution, like color hexes
                    These constants are always named using capital letters and underscores like so: const COLOR_RED = "#F00";
    Alert() can be us9ed to print a variable or message 

    Quote types and Strings:
    "", '', `` can all be used to declare strings. Double and single qutoes are functionally the same thing, however backticks (``) allow you to embed variables
    and expression into a string by wrapping them in ${} for exampe:
        let name = "John";
        alert(`Hello, ${name}!`);

    https://www.w3schools.com/js/js_string_methods.asp - Link that has a lot of commonly used js string methods such as slice, length, etc
    https://www.w3schools.com/jsref/jsref_obj_string.asp - Same as above, with string methods, but also string HTML wrapper methods as well
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String - fully exhaustive list of methods usable on strings
    https://javascript.info/ifelse - Useful stuff on conditional branching that follows the format: (condition) ? (do this if true) : (or else do this)

   ⁡⁢⁣⁣ Functions:⁡
        An example of a function in js is this:
            function myFunction(){
                alert("Hello");
            }
        This function would be called by using myFunction(); and would say hello.
        An example of a function with parameters (and a default parameter value is shown below):
            function hello(name = "Adam") {
                console.log(`Hello ${name}!`);
            }
        Anonymous functions are those that are created without a name, and they appear like so:
            (function(){
                alert("Hello");
            });
        When would you really use anonymous functions? You'll often see these when a function expects to receive another function as a parameter. In this case the
        function parameter is often passed as an anonymous function.
            For example, consider you want to run some code when the user types into a text box, you can use addEventListener() with the textbox to do this. This function
                expects you to pass it two parameters -- the name to of the event ot listen for, which in this kay is keydown, and a function to run when the event happens.

                function logKey(event) {
                    console.log(`You pressed "${event.key}".`);
                    }

                textBox.addEventListener("keydown", logKey);
            When the user presses the key, the browser will call the function provided and will pass it a parameter containing the information about the event.
            Instead of defining the separate logkey() function, you can instead pass it an anonymous function:

                textBox.addEventListener("keydown", function (event) {
                    console.log(`You pressed "${event.key}".`);
                    });

            By doing this you essentially gain the ability to put a function as the parameter of another function or event.

        Arrow Functions:
            These are the same as an anonymous function functionally, but you instead write them like so:

            textBox.addEventListener("keydown", (event) => {
                console.log(`You pressed "${event.key}".`);
                });
            
            And if the function is only going to take one parameter anyways, you can omit the parantheses around the parameter like os:

            textBox.addEventListener("keydown", event => {
                console.log(`You pressed "${event.key}".`);
                });

            Finally, if your function only contains one line thats a return statement, you can omit the {} and hte return keyword to implicitly return
                the expression:
            
            const originals = [1, 2, 3];
            const doubled = originals.map(item => item * 2);
            console.log(doubled); // [2, 4, 6]

            In the above code, the map() method of array is used to double every value in the original array.
            In the above, the example (item => item * 2) is functionally the same as this function:

            function doubleItem(item) {
                return item * 2;
                }

            Likewise, you can greatly simplify the above textbox listener function as this:

            textBox.addEventListener("keydown", (event) =>
                console.log(`You pressed "${event.key}".`),
                );
    
    ⁡⁢⁣⁣Function scope and conflicts:
        When you create a function, the variables and other things defined inside the function are inside their own separate scope, meaning that they are locked away in 
            their own separate compartments, unreachable from code outside the functions.
        Top level, outside of functions, is called global scope.
        ⁡Inside of a function would entail local scope, and any variables created inside of a function will not be accessible outside of that function unless a return is used.

    ⁡⁢⁣⁣Return and return values:
        These are the values that a function returns when it completes. You've already met return values several times, although you may not have thought about them explicitly.
        ⁡To return a value from a custom function, you need to use the "return" keyword.

    Function declaration: A function, declared as a separate statement, in the main code flow:
        // Function Declaration
        function sum(a, b) {
            return a + b;
        }

    Function expression:
        A function, created inside an expression or inside another syntax construct. Here, the function si created on the right side of the assignment expression.
        // Function Expression
        let sum = function(a, b) {
            return a + b;
        };
    
    Most interesting is WHEN these functions would be used. Function expression is only created when the execution reaches it, and is only usable from that point forward.
    Function declarations are different. They can be called earlier than it is defined, as they are created on the start of the code running.

    ⁡⁢⁣⁣Java call stacks:⁡
        Works on the LIFO principle, or last-in-first-out. https://www.javascripttutorial.net/javascript-call-stack/ Good tutorial on call-stack order, but not worth typing out notes for.


