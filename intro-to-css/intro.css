/* At the most basic level, the css syntax is made of various rules
There is a selector, a semi-colon separated list of declarations, and each declaration has a property:value pair */
/* 
selector {
    property:value;
} 
*/

/* The universal Selector: */
* {
    color:purple;
}
/* In this example, every element would have the color:purple style applied to it */

/* Type Selectors: */
/* A type selector will select all elements of the given element type, and the syntax is just the name of the element. */
div {
    color: white;
}
/* This one automatically selects the type in the html file */

/* Class selectors */
/* Class selectors select all elements with the given class, which is just an attribute you place  */
.alert-text{
    color:red;
}
/* This is how the html application would look like: */
/* <p class = "alert-text">Number 1 - I'm a class!</p> */


/* ID Selectors */
/* Similar to class selectors. Selects an element with the given id, which is another attribute you place on an html element.
The major difference between this and classes is that an element can only have one ID (cannot be repeated on a single page) */
/* Ids will use a hastag before them instead of a period */
#title {
    background-color: red;
}

/* The grouping selector: */
/* If two groups of element share some of their style declarations, they can be grouped together: */
.read, .unread {
    color: white;
    background-color: black;
}
.read{
    color-scheme: yellow;
}
.unread{
    color-scheme: blue;
}

/* Chaining selectors: */
/* Another way to use selectors is to chain them as a list without separation. */
/* Say you had this code here:
<div>
<div class="subsection header">Latest Posts</div>
<p class="subsection preview">This is where a preview for a post might go.</p>
</div> 
Both of them have "subsection" elements with some unique styles, but what if we only want a separate rule
to the element that also has header as a second class? This can be done with chaining the class selectors together
in CSS like so: */
.subsection.header{
    color: red;
}

/* This can also be used to chain a class and an ID as shown below: */
.subsection#preview{
    color: blue;
}

/* Generally, you can chain anything except for two type selectors, since an element can't b e two different types at once. */

/* Descendant Combinator */
/* Allow you to combine multiple selectors differently than grouping or chaining. 
It shows a relationship between the selectors. */
/* the descendent combinator is represented in CSS by a single space between 
selectors. It will cause elements that match the last selector
to be selected if they also have an ancestor that matches the previous selector. */
.ancestor .contents {
    background-color: blue;
}
/* So something like .ancestor .child would select an element with the class child if it has an ancestor with the class ancestor. 
Another way to think of it is child will only be selected if it is nested inside of ancestor, no matter how deep. Take a quick look 
at the example below and see if you can tell which elements would be selected based on the CSS rule provided: */

/* Properties to get started with: */
/* Color and background color: */
color: yellow;
background-color: red;
color: transparent;

/* Typography basics and text-align */
/* font-family can be a single-value or a comma-separated list of values that determine what font an element uses */
    /* Each falls into one of two categories, a font-family like "times new roman", or a "generic family name" like sans-serif */
    /* Common practice is to list most-wanted first, then provide alternatives: */
    family: "Times New Roman", sans-serif;

/* font-size sets the size of the font. This should contain no white-space, i.e.: */
    font-size:22px

/* font-weight affects the boldness of the text. Can be a keyword, like bold, or a number from 1 to 1000. */
    font-weight: bold
    font-weight: 800

/* text-align will align text horizontally within an element, and common keywords can be used like this: */
    text-align: center

/*  Image height and width. You could auto-adjust an image's size by setting one attribute to auto, then changing the other: */
img {
    height: auto;
    width: 500px;
}


/* Now that we have learned some basic syntax, how do we actually add all the CSS to html? There are three methods to do so: */
    /* External CSS */
        /* the most common method you will come across, involves creating a separate file for the css and linking it inside of an html's
        opening and closing <head> tags with a self-closing link> element */
            /* 
            <!-- index.html -->

            <head>
            <link rel="stylesheet" href="styles.css" />
            </head> 
            */
        /*  href is the location of the css file. The rel attribute is required, specifying the relationshup between the HTML file and linked file */

    /* Internal CSS */
        /* Involves adding the css within the html file itself instead of creating a separate file. Here, you place all rules inside of a pair of 
        opening and closing <style> tags of your html file. Since styles are placed directly inside of the head tags, we no longer need a link element */
                /* 
                <head>
                <style>
                div {
                    color: white;
                    background-color: black;
                }
            
                p {
                    color: red;
                }
                </style>
            </head>
            <body>
                ...
            </body> 
            */

    /* Inline CSS: */
        /* Makes it possible to add styles directly to html elements, though this is not as recommended! */
            /* 
            <body>
            <div style="color: white; background-color: black;">...</div>
            </body> 
            */
        /* Most notable is that we don't actually use selectors here since the styles are added to div */
        /* This method would primarily be for adding a unique style to a SINGLE element, but generally is pretty messy and should be avoided. */


/* THE CASCADE: */
/* Specificity
    A CSS declaration will use more specific calls first, then move to less specific.
    INLINE styles have the highest specificity compared to selectors, while each type of selector has its
        own specificty level that contributes to how specific a declaration is. Other selectors can contribute too,
        but of the ones we have gone over: 
            1. ID selectors (like #title, most specific selector)
            2. class selectors (like .article)
            3. type selectors (like div)  
    Specificity will only take a role wHen an element has multiple, conflicting declarations regarding it.
        When no declaration has a selector with a higher specificity, the one with the larger amounts of single
        selectors will take precedence. 
        /* rule 1 */
        /* 
        .subsection {
            color: blue;
        }
        
        /* rule 2 */
        /* 
        .main .list {
            color: red;
        } 
        */
    /* In this example, rule 2 will take precedence because it has the most number of single selectors since 
    they both share hte same specificity. */
        /* rule 1 */
        /* 
        #subsection {
            background-color: yellow;
            color: blue;
        } 
        */
        
        /* rule 2 */
        /* 
        .main #subsection {
        color: red;
        } 
        */
    /* Note that in the above example, rule 2 will take preference because both have an id, but rule 2
    has an additional class selector and so has higher specificity. However, background-color yellow from rule
    1 will still apply since there is no conflicting declaration in rule 2 */

/* Inheritance */
    /* Inheritance refers to a certain css property that, when applied to an element, is inherited
    by that element's descendents, even if a rule isn't explicitly stated for those.
        Typography based properties such as color, font-size, and font-family are usually inherited
        while most other properties are not.
    The exception to this rule is when directly targeting an element, as this will always beat inheritance. */

/* Rule Order */
    /* The final factor, the end of the line, the tie-breaker. After very other factor has been accounted for,
    there may still be conflicting rules targeting an element. Now what?
        In this case its actually very simple -- the last defined rule will always be the one that takes precedence. */


/* ⁡⁣⁣⁢𝗧𝗛𝗘 𝗕𝗢𝗫 𝗠𝗢𝗗𝗘𝗟⁡ */
/* Placing elements on a webpage accurately is a very important skill, and one that some people miss */
    /* The box model says that every single thing on a webpage, no matter what, is a rectangular box.
        These boxes can have other boxes inside of them, be next to each other, etc.,
        even if there are circles in a webpage, they behave as squares, not circles
    IMPORTANTLY, the best way to manipulate the size and location of these boxes is through:
        ⁡⁢⁣⁣padding⁡
            increases the space between the border of a box and the context of the box
            𝗽𝗮𝗱𝗱𝗶𝗻𝗴: 𝟭𝟬𝗽𝘅;
            Padding can be specific sides controlled with: ⁡⁢⁢⁣padding-top, padding-right, padding-bottom, padding-left⁡
        ⁡⁢⁣⁣margin⁡
            increases the space between the borders of a box and the borders of adjacent boxes
            𝗺𝗮𝗿𝗴𝗶𝗻: 𝟲𝟬𝗽𝘅;
            If using a negative value for one margin, it will subtract that value from the positive value it 
            is adjacent to
        ⁡⁢⁣⁣border⁡
            adds space (even if only a pixel or two) between the margin and the padding
            𝗯𝗼𝗿𝗱𝗲𝗿: 𝟯𝟬𝗽𝘅 𝘀𝗼𝗹𝗶𝗱 𝗯𝗹𝗮𝗰𝗸;
            Can use ⁡⁢⁢⁣border-top, border-right, border-bottom, border-left⁡ to set properties individually.
            ⁡⁢⁢⁣border-width, border-style, and border-color⁡ can also be used in the same way to set attributes
            of the border. If you want to be more specific, you can use something like ⁡⁢⁢⁣border-top-width ⁡for any of the
            directions to create specific stylings
    Its important to note, that when coding with these elements, border and padding will both add to the height
    and width of the element being added.
        If you set an item to be 100x100 px and dont want it to increase when adding a border, you can use the command
            ⁡⁢⁣⁣𝗯𝗼𝘅-𝘀𝗶𝘇𝗶𝗻𝗴: 𝗯𝗼𝗿𝗱𝗲𝗿-𝗯𝗼𝘅;⁡
                This command will force the border to subtract the size of the border from the context, so that even if
                you were to added a 20px border to a 100x100 element, the total size including border and element will
                remain 100x100. WITHOUT this command, the size of the element with A 20 px border and padding 10 would
                be: ⁡⁢⁢⁣element + (padding*2) + (border*2) = 100x100 + 20*2 + 10*2 = 160x160 px element⁡
    Boxes can be block boxes or inline boxes. The choice affects how htye interact with one another.
        ⁡⁢⁣⁣display: block⁡
            for example, this would set the display type of the box to block.
            This causes the box to break onto a new line, it respects width and height, and padding, margin,
            and border will cause other elements to be pushed away from the box.
            If width is not specified, the box will extend in the inline direction to fill the entire space
            available to its container. In most cases, the box becomes as wide as the container, filling 100% of space.
        ⁡⁢⁣⁣display: inline⁡
            This box will not break into a new line. Width and height properties will not apply. Top and bottom padding,
            margins, and borders will apply but will not cause other inline boxes to move away from the box. Left and right
            padding, margins, and borders will apply and cause other linine boxes to move away from the box. 
        ⁡⁢⁣⁣display: flex⁡
            Some boxes have the inner display type, which dictates how elements inside that box are laid out. 
            In the example above, setting display flex will still use the outer display type block, but changes the inner
            display type to flex. Any direct children of this become flex boxes and will behave accordingly.
        ⁡⁢⁣⁣display: inline-block⁡ 
            Is an in-between for block and inline styles. It behaves like inline elements, but has block-style padding and margins
            This is useful to know about, but chances are you will be reaching for flexbox as an option instead of this. 
            
    Divs and Spans:
        These give no inherent meaning to their content. They are generic boxes that can contain anything. Think of them more as containers
        for other elements you want to use. Uses include as a "hook" for styling with CSS so they can be preferentially targeted. Another
        use-case for these are to group related elements under one parent element to correctly position them on the page. Divs and spans allow
        us to do this exact thing.*/
        